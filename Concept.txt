learning React-query or Tanstack-query.
=> A server side state management library that used for data fetching, caching, etc... it is powerful tool that provide some extra functionalty and reduce the boiler plate code...;

npm i @tanstack/react-query
for latest  versioN of React v19 
npm install --save-exact @types/react@^19.0.0 @types/react-dom@^19.0.0

// Adding react-query in our project
simpley go to main.tsx and do these two steps

import {QueryClientProvider, QueryClient} from "@tanstack/react-query";
const queryClient = new QueryClient(); // creating a instance of the query client

<QueryClientProvider client={queryClient}>
 <App/>
</QueryClientProvider>

definations:
QueryClient: => it is main part of the library which manages the background data fetching, catching and other query related logic.

QueryClientProvider: => it is component used to provide that instance to our application

// useQuery() hook
this is the main hook which used for fetching the data from the function withour need of any extra boilerplate code we simpley passisng the object to it and this return many thing which are handel by this hook like:
data, isLoading, isError, isStale, isFetched, ect... 

const {data} = useQuery({
    queryKey : ["name"],       // make sure to give in array always
    queryFn : getDataFunction, // here we give function refrence not caalling this;
});

// handeling isLoading and isError and error;
simpley hme useQuery hook built in isLoading, isError andother things provide krta hai us basis pe ham show kar skte hai loading and error handeling;

isLoading and isError are the boolean values and hook provide one other thong called error which is actually that error.message jisko hm ui par show kar sakte hai;

// installing React-query devtools;

npm i @tanstack/react-query-devtools 

hame install karne ke baad simple udhr hi jaha hamne initialization kiya tha queryClient ka udhar import kro devtools ko or app ke niche paste krdo component ko us wale thats it;

// useMutation(); hook

differnce b/w useQuery and useMutation hook :[
    useQuery hook me ham data only fetch karte hai (Read opertaion) and loding and other things ko get krte hai for ui me show krne ke liye

    useMutation hook ka use karke ham data ko create, update, delete kar skte hai (CUD) like server se baat chit krna data ko update krne ke liye;
];


// Garbage collection time (gcTime) or cache time and ( stale time );

gcTime means ye vo time hai jiske baad data cache se clear ho jata hai. By default react-query data ko first time fetch karke cache karta hai fir next time agar data ya query same hai to dubara fecth nahi hoga cache se data de diya jayga ok gcTime ek time period hai jiske baad vo data garbage collection me chala jata hai. ye by default hai lekin ham stale time ka use karek khud se kisi query ya data ko particularly time de skat hai ki co kitne time tak cache me rahega ya fir itne time period ke baad dubara api se response ayga/fetch hoga; default time 5 min hota hai cache kaa;

gcTime me cache ka data hi show krta hai jab tak time hai uska or koi update ni kiya ho but in network tab request har bar server ko krta hai to ye best practise nahi hai iska solution hai stale time


//stale (expire) time 
by default it is 0 but we can give an option for that in useQuery

stale time me bar bar api request ko ham manage kar skte hai isko ese smjho ki hmne useQuery me stale time de diya 5 min 1000*60*5 ok, to ab first 5 time jab user us page par gya data fetch hua or vo ab fresh state me rahega 5 minute tak means user in 5 minute ke andar agar dubara is page par ayga to dubara api request nahi hogi lekin after 5 minute jab user ayga  tab stale me data ja chuka hoga means vo ab expire hogya hai or dubara api request hogi...


// Polling in React-query 
::=> jese ki zerodha, groww or any stokes websites or real time stoke update hota hai to usme ek api ko regular interval par call kiya jaa rha hota hai without refresh tha whole website to hm us effect ko polling bolte hai ;

def:=> in react-query polling is the technique of fetching the data from an api in regular interval of time without refreshing the whole website to keep the ui up to date and display the real time data;

refetchinterval:1000 in useQuery (isko thik se use kro varna infinite loop hogi api calling ki.)

refetchintervalinbackground:true (means ki agar ham us page se kisi or page par chale gye tab bhi background me data fecth hota rahega or ui-up-date hoga);


// query keys;
ham query key jese dete hai uske sath wale argument ko jab dete hai to key multiple ho jati hai tab query keys bolte hai unhe unka bhaut important use hai , jese ki ham jis basis pe data fetch kar reh hai from function like id, name etc to usko query key me name ke sath dete hai use hota hai ye hai ki jab jab uski value (id,name) change hote hai tab tab data re-fecth hota haii; 

ye value dena bhaut important hai jis se react-query useQuery me queryFn ko update karti hai kyuki jab jab ye chnage hogi tab tab data fetch hoga ,bhuat important hai isko dena ;


pagination me useQuery me ek property hamesha use karo name hai 
[placeHolderdata: keeppreviousdata,]
ise hoga ye ki loading show nhi krega isme ab previous data ko rakhte hue next data ko add krdega ye....


//Mutations in React-Query;
useMutation(); hook is used for create,update and delete opertions performs over the data and we provide many options to them to perform actions.
basiaclly client se server ko kuch bjnaaa...!

//List of options are which are very usefull because inke bina ui par hm chijo ko reflect nahi kar skte:
1.onSuccess =>  a mutation callback function that run when mutation is successful
2.onError => a mutation callback function that run when mutation is fails
3.onSettled => a mutation callback function that run regardless of fails or success
4.mutationKey => a unique key identify the mutation in the cache.



//Steps are :-
1. we have to create actionMutationName variable like this :
    const deleteMutation = useMutation({
        mutationFn:(id:number)=> //call our own function for delete things based on that id;
    });

    //isme id:number wali receieve hori hai hme onclick se 
    // our function me jo id bj rahe hai uske base par action perform kr reh hai.

2. Now we have to do this on button onClick={()=> deleteMutation.mutate(id)};
   //mutate ek function hai jo useMutation ke anadar wale mutationFn ko call krta hai.

3. Now we have to create a new delete function so that we call that in useMutation;

   const ourDeleteFunction = async ()=>{
    await fetch(`baseUrl/users/${id}`,{
        method: "delete",
    })
   };

//***after doing above steps the data is delete from api but updates not reflect in the ui so for that we have to use our configuration options;
 
 hame ek queryClient ka acces lene ke liye ek hook ka use krna hai taki hm cache se data clear kar sake;

 const queryClient = useQueryClient();

 onSuccess(data,id // jiske base par action perform krna hai){
    queryClient.setQueryData(["users"], (elements)=>{
        return elements?.filter((elem) => elem.id !== id)
    })
 };

 //setQueryData is the function that takes two arguments one is our query key vahi wali jo data get krte time use ki thi , taki ab ham cache se data ko acces karke cler sake, and n=another argument is callback function jisme data ka array aaata hai uspar hm action lagate hai like filter etc...

 upar jo hmne data liya hai vo vo wala data hai jo hm server action me ya hamare own function me body ke andar pass krte hai like

  headers: {
            'Content-Type': 'application/json',
        },
   body: JSON.stringify({
            name: 'Gaurav Sharma.', // ye us data ke anadar milega agar hm chae to udahr isko de skte hai.
        }),

    queryClient.setQueryData(["users"], (allUsersData // we get all data from cache)=>{
        return allUsersData?.map(user=> user.id === id ? {...user, {name : data.name}});
    });


//More on React-Query;